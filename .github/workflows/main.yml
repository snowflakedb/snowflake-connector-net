# This is a basic workflow to help you get started with Actions

name: DotNet Build and Test

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      logLevel:
        default: warning
        description: "Log level"
        required: true
      tags:
        description: "Test scenario tags"
        required: false

env:
  DOTNET_VERSION: 6.0
  DOTNET_LEGACY_VERSION: 4.7.2

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-net:
    name: Build-Net
    # The type of runner that the job will run on
    runs-on: windows-latest
    strategy:
      matrix:
        dotnet: ['6.0.100']
        cloud_env: ['AZURE', 'GCP', 'AWS']

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      #Setup .NET
      - uses: actions/checkout@main
      - name: Setup Dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet }}
      - name: Decrypt Parameters
        shell: bash
        env:
           PARAMETER_SECRET: ${{ secrets.PARAMETER_SECRET }}
        run: |
           gpg --quiet --batch --yes --decrypt --passphrase="$PARAMETER_SECRET" \
            ./.github/workflows/parameters/parameters_${{ matrix.cloud_env }}.json.gpg > Snowflake.Data.Tests/parameters.json
      - name: Clean-up before build
        run: dotnet clean snowflake-connector-net.sln && dotnet nuget locals all --clear
      - name: Build Driver
        run: dotnet build snowflake-connector-net.sln /p:DebugType=Full

  test-linux:
    needs: [build-net]
    name: Tests on Linux
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        #dotnet: ['2.2.402']
        dotnet: ['net6.0']
        cloud_env: ['azure', 'gcp', 'aws']
    steps:
      - uses: actions/checkout@main
      - name: Setup Dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.100
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Decrypt Parameters
        shell: bash
        env:
           PARAMETER_SECRET: ${{ secrets.PARAMETER_SECRET }}
        run: |
           gpg --quiet --batch --yes --decrypt --passphrase="$PARAMETER_SECRET" \
            ./.github/workflows/parameters/parameters_${{ matrix.cloud_env }}.json.gpg > Snowflake.Data.Tests/parameters.json
      - name: Build Driver
        run: |
          dotnet restore
          dotnet build
      - name: Run minicover
        run: |
          cd Snowflake.Data.Tests
          dotnet new tool-manifest
          dotnet tool install --local MiniCover --version 3.4.7
          dotnet minicover instrument --workdir ./ --assemblies 'Snowflake.Data.Tests/**/bin/**/Snowflake.**.dll' --sources 'Snowflake.Data/**/*.cs'
          dotnet minicover reset
          dotnet test --no-build
          dotnet minicover uninstrument

  test-mac:
    needs: test-linux
    name: Tests on MAC
    runs-on: macos-latest
    strategy:
      max-parallel: 1
      matrix:
        #dotnet: ['2.2.402']
        dotnet: ['net6.0']
        cloud_env: ['azure', 'gcp', 'aws']
    steps:
      - uses: actions/checkout@main
      - name: Setup Dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.100
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Decrypt Parameters
        shell: bash
        env:
           PARAMETER_SECRET: ${{ secrets.PARAMETER_SECRET }}
        run: |
           gpg --quiet --batch --yes --decrypt --passphrase="$PARAMETER_SECRET" \
            ./.github/workflows/parameters/parameters_${{ matrix.cloud_env }}.json.gpg > Snowflake.Data.Tests/parameters.json
      - name: Build Driver
        run: |
          dotnet restore
          dotnet build
      - name: Run minicover
        run: |
          cd Snowflake.Data.Tests
          dotnet new tool-manifest
          dotnet tool install --local MiniCover --version 3.4.7
          dotnet minicover instrument --workdir ./ --assemblies 'Snowflake.Data.Tests/**/bin/**/Snowflake.**.dll' --sources 'Snowflake.Data/**/*.cs'
          dotnet minicover reset
          dotnet test --no-build
          dotnet minicover uninstrument
